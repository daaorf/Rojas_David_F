######Gráfica general######
ggplot(bd_prueba, aes(x = Tipo_de_Fuente, y = Emision, fill = Tipo_de_Fuente)) +
geom_boxplot() +
facet_wrap(~Contaminante, scales = "free_y") +
theme_minimal()
ggplot(PM_2_5, aes(x = Tipo_de_Fuente, y = Emision, fill = Tipo_de_Fuente)) +
geom_boxplot() +
theme_minimal() +
scale_x_discrete(labels = c(
"Fuentes de área" = "FA",
"Fuentes fijas" = "FF",
"Fuentes móviles carreteros" = "FMC",
"Fuentes móviles que no circulan por carretera" = "FMNC",
"Fuentes naturales" = "FN")) +
labs(title = "Emisiones de PM2.5 por tipo de fuente",
y = "Emisión",
x = "Tipo de fuente")
ggplot(bd_prueba, aes(x = Tipo_de_Fuente, y = Emision, fill = Tipo_de_Fuente)) +
geom_boxplot() +
facet_wrap(~Contaminante, scales = "free_y") +
theme_minimal() +
scale_x_discrete(labels = c(
"Fuentes de área" = "FA",
"Fuentes fijas" = "FF",
"Fuentes móviles carreteros" = "FMC",
"Fuentes móviles que no circulan por carretera" = "FMNC",
"Fuentes naturales" = "FN"))
View(union2)
View(union1)
row.names(union1) <- union1$Entidad_federativa
dn <- union1[,-1]
pca <- prcomp(dn,scale. = TRUE)
row.names(cpf) <- cpf$Entidad_federativa
View(cm)
row.names(cm) <- cm$Entidad_federativa
row.names(co) <- co$Entidad_federativa
dn <- co[,-1]
pca <- prcomp(dn,scale. = TRUE)
summary(pca)
fviz_eig(pca, addlabels = TRUE)
######PCA##########
library(factoextra)
######PCA##########
library(factoextra)
summary(pca)
fviz_eig(pca, addlabels = TRUE)
fviz_pca_ind(pca,
geom.ind = "point",
col.ind = "cos2",
repel = TRUE)
fviz_pca_biplot(pca, repel = TRUE,
col.var = "red",
col.ind = "blue")
##########PCA####
#otras variables
row.names(cpf) <- cpf$Tipo_de_Fuente
##########PCA####
#otras variables
row.names(union1) <- union1$Tipo_de_Fuente
View(cpf)
View(union0)
View(union1)
# Cargar base de datos de muertes por cancer a nivel estatal en México, tomada de: Estadísticas de Defunciones Registradas (EDR) 2023 - INEGI
bd1 <- read_xlsx("muertes_cancer.xlsx")
library(tidyverse)
library(readxl)
library(sf)
library(ggplot2)
library(ggpubr)
library(tidyverse)
library(readxl)
library(sf)
library(ggplot2)
library(ggpubr)
#####Carga y modificación de las bases de datos#####
######Población######
pt <- read_excel("IMM_2020.xlsx", sheet = 2)
pob <- pt %>%
group_by(NOM_ENT) %>% #agrupa por estados
summarize(Poblacion_total = sum(POB_TOT, na.rm = TRUE)
#suma las poblaciones de cada municipio, guardandolo el Poblacion_total, y esto lo tendrá en una fila por estado
)
######Área de estados######
mexshp <- st_read("entidades_mex.shp")
estados <- as.data.frame(mexshp)
#Modificamos los nombres de pob para que coincidan en la unión
pob <- pob %>%
#Dentro de pob...
mutate( #...modifica las colmunas.
NOM_ENT = case_when( #En específico a esta <<En caso de...>>
NOM_ENT== "México" ~ "Estado de México",
NOM_ENT == "Michoacán de Ocampo" ~ "Michoacán",
NOM_ENT == "Veracruz de Ignacio de la Llave" ~ "Veracruz",
TRUE ~ NOM_ENT
))
#union
union0 <- left_join(estados,pob, by = c ("NOMGEO" = "NOM_ENT"))
######Tabla demográfica######
#demo tendrá sólo los estados, su área y poblacipon total
demo <- union0 %>%
select(NOMGEO,area_ha,Poblacion_total)
#Se crea una nuevacolumna de km2
demo <- demo %>%
mutate(km2 = area_ha/100)
#para poder tener la densidad: población/km2 de cada estado.
demo <- demo %>%
mutate(densidad = Poblacion_total/km2)
#Combina las tablas geográfica y demográfica
mexdens <- mexshp %>%
left_join(demo, by = "NOMGEO")
#Grafica el mapa
ggplot(mexdens) +
geom_sf(aes(fill = densidad), color = "black", size = 0.2) +
scale_fill_viridis_c(option = "magma", direction = -1,
name = "Densidad (hab/km²)") +
theme_minimal() +
labs(title = "Densidad poblacional por estado (INEGI 2020)",
caption = "Fuente: Censo de Población y Vivienda 2020") +
theme(plot.title = element_text(face = "bold", size = 14),
legend.position = "right")
#Grafica el mapa
ggplot(mexdens) +
geom_sf(aes(fill = densidad), color = "black", size = 0.2) +
scale_fill_viridis_c(option = "magma",
name = "Densidad (hab/km²)") +
theme_minimal() +
labs(title = "Densidad poblacional por estado (INEGI 2020)",
caption = "Fuente: Censo de Población y Vivienda 2020") +
theme(plot.title = element_text(face = "bold", size = 14),
legend.position = "right")
ggplot(mexdens) +
geom_sf(aes(fill = densidad), color = "black", size = 0.2) +
scale_fill_viridis_c(
option = "magma",
trans = "log",                 # 🔹 transformación logarítmica
name = "Densidad (hab/km²)",
breaks = c(10, 100, 1000, 10000), # 🔹 puedes ajustar según tus datos
labels = c("10", "100", "1,000", "10,000")
) +
theme_minimal() +
labs(title = "Densidad poblacional por estado (INEGI 2020)",
caption = "Fuente: Censo de Población y Vivienda 2020") +
theme(plot.title = element_text(face = "bold", size = 14),
legend.position = "right")
View(mexdens)
ggplot(mexdens) +
geom_sf(aes(fill = densidad), color = "black", size = 0.2) +
scale_fill_viridis_c(
option = "magma",
trans = "log",                 # 🔹 transformación logarítmica
name = "Densidad (hab/km²)",
breaks = c(10, 100, 1000, 7000), # 🔹 puedes ajustar según tus datos
labels = c("10", "100", "1,000", "10,000")
) +
theme_minimal() +
labs(title = "Densidad poblacional por estado (INEGI 2020)",
caption = "Fuente: Censo de Población y Vivienda 2020") +
theme(plot.title = element_text(face = "bold", size = 14),
legend.position = "right")
ggplot(mexdens) +
geom_sf(aes(fill = densidad), color = "black", size = 0.2) +
scale_fill_viridis_c(
option = "magma",
trans = "log",                 # 🔹 transformación logarítmica
name = "Densidad (hab/km²)",
breaks = c(250, 500, 1000, 7000), # 🔹 puedes ajustar según tus datos
labels = c("10", "100", "1,000", "10,000")
) +
theme_minimal() +
labs(title = "Densidad poblacional por estado (INEGI 2020)",
caption = "Fuente: Censo de Población y Vivienda 2020") +
theme(plot.title = element_text(face = "bold", size = 14),
legend.position = "right")
ggplot(mexdens) +
geom_sf(aes(fill = densidad), color = "black", size = 0.2) +
scale_fill_viridis_c(
option = "magma",
trans = "log",                 # 🔹 transformación logarítmica
name = "Densidad (hab/km²)",
breaks = c(10, 100, 1000, 7000), # 🔹 puedes ajustar según tus datos
labels = c("10", "100", "1,000", "10,000")
) +
theme_minimal() +
labs(title = "Densidad poblacional por estado (INEGI 2020)",
caption = "Fuente: Censo de Población y Vivienda 2020") +
theme(plot.title = element_text(face = "bold", size = 14),
legend.position = "right")
ggplot(mexdens) +
geom_sf(aes(fill = densidad), color = "black", size = 0.2) +
scale_fill_viridis_c(
option = "magma",
trans = "log",                 # 🔹 transformación logarítmica
name = "Densidad (hab/km²)",
breaks = c(10, 100, 1000, 6197), # 🔹 puedes ajustar según tus datos
labels = c("10", "100", "1,000", "6197")
) +
theme_minimal() +
labs(title = "Densidad poblacional por estado (INEGI 2020)",
caption = "Fuente: Censo de Población y Vivienda 2020") +
theme(plot.title = element_text(face = "bold", size = 14),
legend.position = "right")
ggplot(mexdens) +
geom_sf(aes(fill = densidad), color = "black", size = 0.2) +
scale_fill_viridis_c(
option = "magma",
trans = "log",                 # 🔹 transformación logarítmica
name = "Densidad (hab/km²)",
breaks = c(11, 100,200, 1000, 6197), # 🔹 puedes ajustar según tus datos
labels = c("11", "100","200", "1,000", "6197")
) +
theme_minimal() +
labs(title = "Densidad poblacional por estado (INEGI 2020)",
caption = "Fuente: Censo de Población y Vivienda 2020") +
theme(plot.title = element_text(face = "bold", size = 14),
legend.position = "right")
ggplot(mexdens) +
geom_sf(aes(fill = densidad), color = "black", size = 0.2) +
scale_fill_viridis_c(
option = "magma",
trans = "log",                 # 🔹 transformación logarítmica
name = "Densidad (hab/km²)",
breaks = c(11, 50, 200, 700, 6197), # 🔹 puedes ajustar según tus datos
labels = c("11", "50","200", "700", "6197")
) +
theme_minimal() +
labs(title = "Densidad poblacional por estado (INEGI 2020)",
caption = "Fuente: Censo de Población y Vivienda 2020") +
theme(plot.title = element_text(face = "bold", size = 14),
legend.position = "right")
######Contaminantes por estado######
#Se guarda en cm la información que existe en la tabla de mediciones promedio del año de contaminantes por municipio tomado en el año 2018
cm <- read_csv("contaminantes.csv")
#co es la tabla de los estados de México y la cantidad promedio de 7 contaminantes en el año 2018
co <- cm %>%
#Dentro de cm...
group_by(Entidad_federativa) %>%
#Agrupa por entidades y...
summarize(across(3:9, ~ mean(.x, na.rm = TRUE)
#De las columnas de contaminantes (3:9), crea el promedio de todas las cantidades registras, creando una solo fila para cada estado
))
######Contaminantes por tipo de fuente por estado######
#cpf tiene el promedio de 7 contaminantes por por tipo de fuente de cada estado de Méxic
cpf <- cm %>%
#Dentro de cm...
group_by(Entidad_federativa, Tipo_de_Fuente) %>%
#... agrupa por Entidad_federativa y Tipo de Fuente, luego...
summarise(across(2:8, ~ mean(.x, na.rm = TRUE)))
#Modificamos
mexshp <- mexshp %>%
#Dentro de pob...
mutate( #...modifica las colmunas.
NOMGEO = case_when( #En específico a esta <<En caso de...>>
NOMGEO == "Estado de México" ~ "México",
NOMGEO  == "Coahuila de Zaragoza" ~ "Coahuila",
TRUE ~ NOMGEO
))
#Creamos una nueva tabla que comnbina los datos de emisiones con la geografía
mexco <- mexshp %>%
left_join(co, by = c("NOMGEO" ="Entidad_federativa"))
ggplot(mexco) +
geom_sf(aes(fill = SO_2 ), color = "white", size = 0.2) +
scale_fill_viridis_c(option = "plasma", name = "Emisión (ton/año)") +
theme_minimal() +
labs(title = "Emisiones de CO por estado",
caption = "Inventario Nacional de Emisiones") +
theme(plot.title = element_text(face = "bold", size = 14))
View(co)
View(co)
# Supongamos que "emisiones" tiene estado, CO, NOx, PM10, etc.
pcaco <- co %>%
select(-Entidad_federativa) %>%
scale()  # 🔹 estandariza para que todos los contaminantes pesen igual
pca <- prcomp(pcaco, scale = TRUE)
View(pca)
# Visualización
autoplot(pca, data = co, colour = 'Entidad_federativa', label = TRUE, label.size = 3) +
theme_minimal() +
labs(title = "PCA de emisiones por estado",
subtitle = "Agrupación de estados según perfil de contaminantes")
View(co)
# Supongamos que "emisiones" tiene estado, CO, NOx, PM10, etc.
pcaco <- co %>%
select(Entidad_federativa) %>%
scale()  # 🔹 estandariza para que todos los contaminantes pesen igual
# Supongamos que "emisiones" tiene estado, CO, NOx, PM10, etc.
pcaco <- co %>%
select(-Entidad_federativa) %>%
scale()  # 🔹 estandariza para que todos los contaminantes pesen igual
pca <- prcomp(pcaco, scale = TRUE)
##########PCA####
library(ggfortify)
# Visualización
autoplot(pca, data = co, colour = 'Entidad_federativa', label = TRUE, label.size = 3) +
theme_minimal() +
labs(title = "PCA de emisiones por estado",
subtitle = "Agrupación de estados según perfil de contaminantes")
##########PCA####
library(ggfortify)
##########PCA####
install("ggfortify")
##########PCA####
install.packages("ggfortify")
library(ggfortify)
# Visualización
autoplot(pca, data = co, colour = 'Entidad_federativa', label = TRUE, label.size = 3) +
theme_minimal() +
labs(title = "PCA de emisiones por estado",
subtitle = "Agrupación de estados según perfil de contaminantes")
unique(co$Entidad_federativa)
co$region <- case_when(
co$Entidad_federativa %in% c("Baja California", "Sonora", "Chihuahua", "Durango", "Sinaloa", "Baja California Sur") ~ "Noroeste",
co$Entidad_federativa %in% c("Coahuila", "Nuevo León", "Tamaulipas") ~ "Noreste",
co$Entidad_federativa %in% c("Nayarit", "Jalisco", "Colima", "Michoacán") ~ "Occidente",
co$Entidad_federativa %in% c("Zacatecas", "Aguascalientes", "San Luis Potosí", "Guanajuato") ~ "Bajío",
co$Entidad_federativa %in% c("Querétaro", "Hidalgo", "Tlaxcala", "Puebla", "Ciudad de México","México", "Morelos") ~ "Centro",
co$Entidad_federativa %in% c("Guerrero", "Oaxaca", "Chiapas") ~ "Sur",
co$Entidad_federativa %in% c("Tabasco", "Campeche", "Yucatán","Quintana Roo","veracruz") ~ "Sureste",
TRUE ~ "Otra"
)
View(co)
co$region <- case_when(
co$Entidad_federativa %in% c("Baja California", "Sonora", "Chihuahua", "Durango", "Sinaloa", "Baja California Sur") ~ "Noroeste",
co$Entidad_federativa %in% c("Coahuila", "Nuevo León", "Tamaulipas") ~ "Noreste",
co$Entidad_federativa %in% c("Nayarit", "Jalisco", "Colima", "Michoacán") ~ "Occidente",
co$Entidad_federativa %in% c("Zacatecas", "Aguascalientes", "San Luis Potosí", "Guanajuato") ~ "Bajío",
co$Entidad_federativa %in% c("Querétaro", "Hidalgo", "Tlaxcala", "Puebla", "Ciudad de México","México", "Morelos") ~ "Centro",
co$Entidad_federativa %in% c("Guerrero", "Oaxaca", "Chiapas") ~ "Sur",
co$Entidad_federativa %in% c("Tabasco", "Campeche", "Yucatán","Quintana Roo","Veracruz") ~ "Sureste",
TRUE ~ "Otra"
)
View(co)
# Visualización
autoplot(pca, data = co, colour = 'region', label = TRUE, label.size = 3) +
theme_minimal() +
labs(title = "PCA de emisiones por estado",
subtitle = "Agrupación de estados según perfil de contaminantes")
autoplot(pca, data = co, colour = "region", label = FALSE, frame = TRUE) +
theme_minimal() +
labs(title = "PCA de emisiones por contaminante agrupado por región") +
scale_color_manual(values = c("Norte" = "#1f78b4",
"Centro" = "#33a02c",
"Sur" = "#e31a1c"))
View(co)
pca_data <- co %>% select(2:8)
pca_result <- prcomp(pca_data, scale. = TRUE)
pca_result <- prcomp(pca_data, scale. = TRUE)
pca_result
autoplot(pca_result,
data = emisiones_estados,
colour = "region",      # colores por región
label = TRUE,           # mostrar nombre del estado
loadings = TRUE,        # mostrar vectores de contaminantes
loadings.label = TRUE,  # mostrar nombres de contaminantes
loadings.label.size = 3,
loadings.colour = "gray40") +
scale_color_manual(values = c("Norte" = "#1f78b4",
"Centro" = "#33a02c",
"Sur" = "#e31a1c")) +
theme_minimal() +
labs(title = "PCA de emisiones de contaminantes por estado",
subtitle = "Color por región geográfica",
x = "Componente principal 1",
y = "Componente principal 2") +
theme(plot.title = element_text(face = "bold"),
legend.position = "right")
autoplot(pca_result,
data = co,
colour = "region",      # colores por región
label = TRUE,           # mostrar nombre del estado
loadings = TRUE,        # mostrar vectores de contaminantes
loadings.label = TRUE,  # mostrar nombres de contaminantes
loadings.label.size = 3,
loadings.colour = "gray40") +
scale_color_manual(values = c("Norte" = "#1f78b4",
"Centro" = "#33a02c",
"Sur" = "#e31a1c")) +
theme_minimal() +
labs(title = "PCA de emisiones de contaminantes por estado",
subtitle = "Color por región geográfica",
x = "Componente principal 1",
y = "Componente principal 2") +
theme(plot.title = element_text(face = "bold"),
legend.position = "right")
autoplot(pca_result,
data = co,
colour = "region",      # colores por región
label = TRUE,           # mostrar nombre del estado
loadings = TRUE,        # mostrar vectores de contaminantes
loadings.label = TRUE,  # mostrar nombres de contaminantes
loadings.label.size = 3,
loadings.colour = "gray40") +
scale_color_manual(values = c("Noroeste" = "red",
"Noreste" = "orange",
"Occidente" = "yellow",
"Bajío" = "darkgreen",
"Centro" = "green",
"Sur" = "blue",
"Sureste" = "purple"
)) +
theme_minimal() +
labs(title = "PCA de emisiones de contaminantes por estado",
subtitle = "Color por región geográfica",
x = "Componente principal 1",
y = "Componente principal 2") +
theme(plot.title = element_text(face = "bold"),
legend.position = "right")
summary(pca_result)
pca_result$rotation
plot(pca_result$rotation)
pca_result
#Para el PCA, vamos a usar los datos de las las columnas 2 - 8, que corresponden a los contamiantes
pca_data <- co %>% select(2:8)
#Se guarda el PCA, asegurando que todos tengan una escala cercana para no estar afectados por la variación
pca_result <- prcomp(pca_data, scale. = TRUE)
summary(pca_result)
autoplot(pca_result,
data = co,
colour = "region",      # colores por región
label = TRUE,           # mostrar nombre del estado
loadings = TRUE,        # mostrar vectores de contaminantes
loadings.label = TRUE,  # mostrar nombres de contaminantes
loadings.label.size = 3,
loadings.colour = "gray40") +
scale_color_manual(values = c("Noroeste" = "red",
"Noreste" = "orange",
"Occidente" = "yellow",
"Bajío" = "darkgreen",
"Centro" = "green",
"Sur" = "blue",
"Sureste" = "purple"
)) +
theme_minimal() +
labs(title = "PCA de emisiones de contaminantes por estado",
subtitle = "Color por región geográfica",
x = "Componente principal 1",
y = "Componente principal 2") +
theme(plot.title = element_text(face = "bold"),
legend.position = "right")
row.names(co) <- co$Entidad_federativa
dn <- co[,-1]
pca <- prcomp(dn,scale. = TRUE)
library(factoextra)
row.names(co) <- co$Entidad_federativa
dn <- co[,-1]
pca <- prcomp(dn,scale. = TRUE)
scale_color_manual(values = c("Noroeste" = "red",
"Noreste" = "orange",
"Occidente" = "yellow",
"Bajío" = "darkgreen",
"Centro" = "green",
"Sur" = "blue",
"Sureste" = "purple"
)) +
theme_minimal() +
labs(title = "PCA de emisiones de contaminantes por estado",
subtitle = "Color por región geográfica",
x = "Componente principal 1",
y = "Componente principal 2") +
theme(plot.title = element_text(face = "bold"),
legend.position = "right")
autoplot(pca_result,
data = co,
colour = "region",      # colores por región
label = TRUE,           # mostrar nombre del estado
loadings = TRUE,        # mostrar vectores de contaminantes
loadings.label = TRUE,  # mostrar nombres de contaminantes
loadings.label.size = 3,
loadings.colour = "gray40",
frame = TRUE,           # <--- agrega los óvalos de agrupamiento
frame.type = "norm") +
scale_color_manual(values = c("Noroeste" = "red",
"Noreste" = "orange",
"Occidente" = "yellow",
"Bajío" = "darkgreen",
"Centro" = "green",
"Sur" = "blue",
"Sureste" = "purple"
)) +
theme_minimal() +
labs(title = "PCA de emisiones de contaminantes por estado",
subtitle = "Color por región geográfica",
x = "Componente principal 1",
y = "Componente principal 2") +
theme(plot.title = element_text(face = "bold"),
legend.position = "right")
#install.packages("ggfortify")
library(ggfortify)
autoplot(pca_result,
data = co,
colour = "region",      # colores por región
label = TRUE,           # mostrar nombre del estado
loadings = TRUE,        # mostrar vectores de contaminantes
loadings.label = TRUE,  # mostrar nombres de contaminantes
loadings.label.size = 3,
loadings.colour = "gray40",
frame = TRUE,           # <--- agrega los óvalos de agrupamiento
frame.type = "norm") +
scale_color_manual(values = c("Noroeste" = "red",
"Noreste" = "orange",
"Occidente" = "yellow",
"Bajío" = "darkgreen",
"Centro" = "green",
"Sur" = "blue",
"Sureste" = "purple"
)) +
theme_minimal() +
labs(title = "PCA de emisiones de contaminantes por estado",
subtitle = "Color por región geográfica",
x = "Componente principal 1",
y = "Componente principal 2") +
theme(plot.title = element_text(face = "bold"),
legend.position = "right")
